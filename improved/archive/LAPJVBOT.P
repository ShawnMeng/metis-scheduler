program lapjvbot;

{ Pascal version of the Bottleneck Assignment routine, transformation of the sum criterion lapjv
algorithm as published in
R. Jonker and A. Volgenant, University of Amsterdam,
A Shortest Augmenting Path Algorithm for Dense and Sparse Linear Assignment Problems,
Computing 38, 325-340 (1987) }

const maxn    = 200;
      inf     = 10000;

type vec = array[1..maxn] of integer;
     mat = array[1..maxn] of vec;

var n,nr,zlap: integer;
    x,y: vec;
    c: mat;

procedure matrix;
var k,l: integer;
begin for k:=1 to n do for l:=1 to n do c[k,l]:=random(1000)+1 end;

function blap(var x,y: vec): integer;

label 1;

var h,i,j,k,i0,j0,dj,nn,min,sol,low,up: integer;
    col,lab,d: vec;

begin
   sol:=-inf; nn:=0; for i:=1 to n do x[i]:=0;
   for j:=n downto 1 do
   begin
      col[j]:=j; min:=inf; i:=1;
      repeat
         dj:=c[i,j];
         if dj<=sol then begin min:=sol; i0:=i; i:=n+1 end else
         begin if dj<min then begin min:=c[i,j]; i0:=i end; i:=i+1 end
      until i>n;
      if x[i0]=0 then begin nn:=nn+1; x[i0]:=j; y[j]:=i0 end else y[j]:=0;
      if min>sol then sol:=min
   end;
   for i0:=1 to n do if x[i0]=0 then
   begin
      up:=1; low:=1;
      for k:=1 to n do
      begin
         j:=col[k]; d[j]:=c[i0,j]; lab[j]:=i0;
         if d[j]<=sol then
            if y[j]=0 then goto 1
            else begin col[k]:=col[up]; col[up]:=j; up:=up+1 end
      end;
      repeat
         if up=low then
         begin
            min:=inf;
            for k:=up to n do
            begin
               j:=col[k]; dj:=d[j];
               if dj<=min then
               begin
                  if dj<min then begin up:=low; min:=dj end;
                  col[k]:=col[up]; col[up]:=j; up:=up+1
               end
            end;
            sol:=min;
            for h:=low to up-1 do
            begin j:=col[h]; if y[j]=0 then goto 1 end
         end;
         j0:=col[low]; low:=low+1; i:=y[j0];
         for k:=up to n do
         begin
            j:=col[k]; dj:=c[i,j];
            if dj<d[j] then
            begin
               lab[j]:=i;
               if dj<=sol then
                  if y[j]=0 then goto 1
                  else begin col[k]:=col[up]; col[up]:=j; up:=up+1 end;
               d[j]:=dj
            end
         end
      until false;
   1: repeat i:=lab[j]; y[j]:=i; k:=j; j:=x[i]; x[i]:=k until i=i0
   end;
   blap:=sol; 
end;

begin
   n:=100;
   for nr:=1 to 10 do
   begin
      matrix; zlap:=blap(x,y);
   end;
end.
